name: Build and Release NameMyPdf

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version number (e.g., 1.0.1)"
        required: true
        default: "0.9.0"

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Install dependencies
        run: |
          # Install Platypus for app building
          brew install --cask platypus
          
          # List what's actually in the Platypus app bundle
          echo "Contents of Platypus Resources:"
          ls -la /Applications/Platypus.app/Contents/Resources/
          
          # Set up Platypus command-line tool
          sudo mkdir -p /usr/local/bin
          sudo mkdir -p /usr/local/share/platypus
          
          # Check if platypus_clt exists (may be gzipped or have different name)
          if [ -f /Applications/Platypus.app/Contents/Resources/platypus_clt ]; then
            sudo cp /Applications/Platypus.app/Contents/Resources/platypus_clt /usr/local/bin/platypus
          elif [ -f /Applications/Platypus.app/Contents/Resources/platypus_clt.gz ]; then
            sudo gunzip -c /Applications/Platypus.app/Contents/Resources/platypus_clt.gz > /tmp/platypus
            sudo mv /tmp/platypus /usr/local/bin/platypus
          else
            # Try to find platypus command line tool with any name
            PLATYPUS_CLI=$(find /Applications/Platypus.app/Contents/Resources -name "*platypus*" -type f | grep -v ".nib" | head -1)
            if [ -n "$PLATYPUS_CLI" ]; then
              echo "Found Platypus CLI at: $PLATYPUS_CLI"
              sudo cp "$PLATYPUS_CLI" /usr/local/bin/platypus
            else
              echo "Error: Could not find Platypus CLI tool"
              exit 1
            fi
          fi
          
          # Copy ScriptExec
          if [ -f /Applications/Platypus.app/Contents/Resources/ScriptExec ]; then
            sudo cp /Applications/Platypus.app/Contents/Resources/ScriptExec /usr/local/share/platypus/
          elif [ -f /Applications/Platypus.app/Contents/Resources/ScriptExec.gz ]; then
            sudo gunzip -c /Applications/Platypus.app/Contents/Resources/ScriptExec.gz > /tmp/ScriptExec
            sudo mv /tmp/ScriptExec /usr/local/share/platypus/ScriptExec
          fi
          
          # Copy nib files
          if [ -d /Applications/Platypus.app/Contents/Resources/MainMenu.nib ]; then
            sudo cp -R /Applications/Platypus.app/Contents/Resources/MainMenu.nib /usr/local/share/platypus/
          fi
          
          # Make executables
          sudo chmod +x /usr/local/bin/platypus
          if [ -f /usr/local/share/platypus/ScriptExec ]; then
            sudo chmod +x /usr/local/share/platypus/ScriptExec
          fi
          
          # Verify installation
          which platypus
          platypus -v

          # Install create-dmg for DMG creation
          brew install create-dmg

      - name: Build app with Platypus
        run: |
          # Remove any pre-existing app bundle that might be in the checkout
          if [ -d "NameMyPdf.app" ]; then
            echo "Removing pre-existing NameMyPdf.app from checkout"
            rm -rf NameMyPdf.app
          fi
          
          # Debug: Show what we have in the current directory
          echo "=== Files in current directory ==="
          ls -la
          echo "=== First 50 lines of normalize_filename.sh ==="
          head -50 normalize_filename.sh
          echo "=== Checking for DEBUG lines in source ==="
          grep "DEBUG:" normalize_filename.sh || echo "No DEBUG in source file!"
          
          # Create the app using Platypus
          platypus \
            --name "NameMyPdf" \
            --app-icon "icon.icns" \
            --bundle-identifier "com.literatecomputing.namemypdf" \
            --author "Jay Pfaffman" \
            --app-version "${{ steps.version.outputs.VERSION }}" \
            --interface-type "Droplet" \
            --interpreter "/bin/bash" \
            --accepts-files \
            --accepts-text \
            --droppable \
            --background \
            --quit-after-execution \
            --text-droppable \
            --file-types "pdf" \
            --uniform-type-identifiers "com.adobe.pdf" \
            --minimum-version "10.11.0" \
            "normalize_filename.sh" \
            "NameMyPdf.app"

      - name: Verify app bundle
        run: |
          ls -la NameMyPdf.app/Contents/
          file NameMyPdf.app/Contents/MacOS/NameMyPdf
          echo "=== Checking bundled script ==="
          head -20 NameMyPdf.app/Contents/Resources/script
          echo "=== Looking for DEBUG lines ==="
          grep "DEBUG:" NameMyPdf.app/Contents/Resources/script || echo "No DEBUG lines found"

      - name: Create ZIP archive
        run: |
          zip -r "NameMyPdf-v${{ steps.version.outputs.VERSION }}.zip" "NameMyPdf.app" --exclude="*.DS_Store"

      - name: Create DMG
        run: |
          # Create a temporary directory for DMG contents
          mkdir -p dmg-contents
          cp -R NameMyPdf.app dmg-contents/

          # Create the DMG with drag-to-Applications functionality
          create-dmg \
            --volname "NameMyPdf v${{ steps.version.outputs.VERSION }}" \
            --volicon "icon.icns" \
            --window-pos 200 120 \
            --window-size 800 450 \
            --icon-size 100 \
            --icon "NameMyPdf.app" 200 190 \
            --hide-extension "NameMyPdf.app" \
            --app-drop-link 600 190 \
            --hdiutil-quiet \
            "NameMyPdf-v${{ steps.version.outputs.VERSION }}.dmg" \
            "dmg-contents/"

      - name: Verify build outputs
        run: |
          ls -la NameMyPdf-v${{ steps.version.outputs.VERSION }}.*
          echo "ZIP size: $(ls -lh NameMyPdf-v${{ steps.version.outputs.VERSION }}.zip | awk '{print $5}')"
          echo "DMG size: $(ls -lh NameMyPdf-v${{ steps.version.outputs.VERSION }}.dmg | awk '{print $5}')"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: "NameMyPdf v${{ steps.version.outputs.VERSION }}"
          body: |
            ## NameMyPdf v${{ steps.version.outputs.VERSION }}

            ### Download Options
            - **DMG (Recommended)**: `NameMyPdf-v${{ steps.version.outputs.VERSION }}.dmg` - Drag and drop installer
            - **ZIP Archive**: `NameMyPdf-v${{ steps.version.outputs.VERSION }}.zip` - Manual installation

            ### Installation

            #### DMG Installation (Recommended)
            1. Download the `.dmg` file
            2. Double-click to mount the disk image
            3. Drag `NameMyPdf.app` to the Applications folder
            4. Install dependencies: `brew install poppler jq`
            5. Right-click the app and select "Open" for first launch

            #### ZIP Installation
            1. Download and extract the `.zip` file
            2. Move `NameMyPdf.app` to your Applications folder
            3. Install dependencies: `brew install poppler jq`
            4. Right-click the app and select "Open" for first launch

            ### System Requirements
            - macOS 10.11.0 (El Capitan) or later
            - Universal binary (Intel & Apple Silicon)
            - Dependencies: `poppler`, `jq` (install via Homebrew)

            ### Usage
            Drag PDF files with DOI information onto the app icon to automatically rename them in the format: `Author Year - Title.pdf`

          files: |
            NameMyPdf-v${{ steps.version.outputs.VERSION }}.dmg
            NameMyPdf-v${{ steps.version.outputs.VERSION }}.zip
          draft: false
          prerelease: false

      - name: Upload artifacts (for manual workflow runs)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: NameMyPdf-v${{ steps.version.outputs.VERSION }}
          path: |
            NameMyPdf-v${{ steps.version.outputs.VERSION }}.dmg
            NameMyPdf-v${{ steps.version.outputs.VERSION }}.zip
