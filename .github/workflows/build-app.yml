name: Build Mac App with Platypus

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Platypus
        run: |
          # Method 1: Install via Homebrew (recommended)
          brew install --cask platypus

          sleep 10 # Wait for Homebrew to finish installation

          ls -l /Applications/Platypus.app/Contents/Resources/

          if [ -f /Applications/Platypus.app/Contents/Resources/platypus_clt.gz ]; then
            sudo gunzip /Applications/Platypus.app/Contents/Resources/platypus_clt.gz
          fi          

          # Install command line tool to /usr/local/bin

          sudo install /Applications/Platypus.app/Contents/Resources/platypus_clt  /usr/local/bin

          # Verify installation
          /Applications/Platypus.app/Contents/Resources/platypus_clt -v

      - name: Debug Environment
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Platypus version:"
          platypus -v
          echo "Python version:"
          python3 --version

      - name: Build App
        run: |
          # Create the app using Platypus command line tool
          # Adjust these parameters based on your specific script and requirements
          /Applications/Platypus.app/Contents/Resources/platypus_clt \
            --app-name "NameMyPdf" \
            --app-icon "icon.icns" \
            --author "Jay Pfaffman" \
            --app-version "0.1" \
            --bundle-identifier "com.literatecomputing.namemypdf" \
            --interface-type "Droplet" \
            --interpreter "/usr/bin/python3" \
            --app-icon "icon.icns" \
            --accepts-files \
            --accepts-text \
            --droppable \
            --output-type "None" \
            --background \
            --quit-after-execution \
            "normalize_filename.py" \
            "NameMyPdf.app"

      - name: Create DMG (Optional)
        run: |
          # Create a DMG for distribution
          mkdir -p dist
          hdiutil create -size 50m -fs HFS+ -volname "NameMyPdf" temp.dmg
          hdiutil attach temp.dmg -mountpoint /Volumes/NameMyPdf
          cp -R NameMyPdf.app /Volumes/NameMyPdf/
          hdiutil detach /Volumes/NameMyPdf
          hdiutil convert temp.dmg -format UDZO -o dist/NameMyPdf.dmg
          rm temp.dmg

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-app
          path: |
            NameMyPdf.app
            dist/NameMyPdf.dmg

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/NameMyPdf.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
