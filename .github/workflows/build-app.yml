name: Build Mac App with Platypus and PyInstaller (Universal Binary)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # This enables manual triggering

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          arch -arm64 brew install --cask platypus
          arch -arm64 brew install poppler
          arch -arm64 brew install jq

          sleep 2
          if [ -f /Applications/Platypus.app/Contents/Resources/platypus_clt.gz ]; then
            sudo gunzip /Applications/Platypus.app/Contents/Resources/platypus_clt.gz
            sudo gunzip /Applications/Platypus.app/Contents/Resources/ScriptExec.gz
          fi
          sudo mkdir -p /usr/local/share/platypus
          sudo install /Applications/Platypus.app/Contents/Resources/platypus_clt /usr/local/bin/
          sudo install /Applications/Platypus.app/Contents/Resources/ScriptExec /usr/local/share/platypus/
          sudo rsync -ra /Applications/Platypus.app/Contents/Resources/*.nib /usr/local/share/platypus/
          sudo chmod +x /usr/local/share/platypus/ScriptExec

      - name: Download Intel versions of tools
        run: |
          # Install Intel Homebrew in a separate location
          mkdir -p /tmp/intel-homebrew
          cd /tmp/intel-homebrew

          # Download and install Intel Homebrew
          arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

          # Install Intel versions of tools
          arch -x86_64 /usr/local/bin/brew install poppler jq

      - name: Make Shell Script Executable
        run: |
          chmod +x normalize_filename.sh

      - name: Build App with Platypus
        run: |
          rm -rf NameMyPdf.app
          /usr/local/bin/platypus_clt \
            --name "NameMyPdf" \
            --author "Jay Pfaffman" \
            --app-version "0.1" \
            --bundle-identifier "com.literatecomputing.namemypdf" \
            --interface-type "Progress Bar" \
            --interpreter "/bin/bash" \
            --app-icon "icon.icns" \
            --droppable \
            --file-prompt \
            --background \
            --quit-after-execution \
            "normalize_filename.sh" \
            "NameMyPdf.app"

          mkdir -p NameMyPdf.app/Contents/Resources

          # Copy ARM64 versions (default)
          cp /opt/homebrew/bin/pdftotext NameMyPdf.app/Contents/Resources/pdftotext-arm64
          cp /opt/homebrew/bin/jq NameMyPdf.app/Contents/Resources/jq-arm64

          # Copy Intel versions with dependencies
          cp /usr/local/bin/pdftotext NameMyPdf.app/Contents/Resources/pdftotext-x86_64
          cp /usr/local/bin/jq NameMyPdf.app/Contents/Resources/jq-x86_64
          
          # Alternative: Check what libraries are actually needed
          echo "Checking pdftotext dependencies:"
          otool -L /usr/local/bin/pdftotext || true
          otool -L /opt/homebrew/bin/pdftotext || true
          
          # Copy all required poppler and dependencies for Intel
          if [[ -d /usr/local/lib ]]; then
              find /usr/local/lib -name "libpoppler*" -o -name "libfontconfig*" -o -name "libfreetype*" -o -name "libjpeg*" -o -name "libpng*" -o -name "libtiff*" | \
              xargs -I {} cp {} NameMyPdf.app/Contents/Resources/lib-x86_64/ 2>/dev/null || true
          fi
          
          # Copy all required poppler and dependencies for ARM64
          if [[ -d /opt/homebrew/lib ]]; then
              find /opt/homebrew/lib -name "libpoppler*" -o -name "libfontconfig*" -o -name "libfreetype*" -o -name "libjpeg*" -o -name "libpng*" -o -name "libtiff*" | \
              xargs -I {} cp {} NameMyPdf.app/Contents/Resources/lib-arm64/ 2>/dev/null || true
          fi          # Create universal launcher scripts
          cat > NameMyPdf.app/Contents/Resources/pdftotext << 'EOF'
          #!/bin/bash
          ARCH=$(uname -m)
          SCRIPT_DIR="$(dirname "$0")"
          if [[ "$ARCH" == "arm64" ]]; then
              DYLD_LIBRARY_PATH="$SCRIPT_DIR/lib-arm64:$DYLD_LIBRARY_PATH" exec "$SCRIPT_DIR/pdftotext-arm64" "$@"
          else
              DYLD_LIBRARY_PATH="$SCRIPT_DIR/lib-x86_64:$DYLD_LIBRARY_PATH" exec "$SCRIPT_DIR/pdftotext-x86_64" "$@"
          fi
          EOF
          
          cat > NameMyPdf.app/Contents/Resources/jq << 'EOF'
          #!/bin/bash
          ARCH=$(uname -m)
          SCRIPT_DIR="$(dirname "$0")"
          if [[ "$ARCH" == "arm64" ]]; then
              exec "$SCRIPT_DIR/jq-arm64" "$@"
          else
              exec "$SCRIPT_DIR/jq-x86_64" "$@"
          fi
          EOF

          # Make launcher scripts executable
          chmod +x NameMyPdf.app/Contents/Resources/pdftotext
          chmod +x NameMyPdf.app/Contents/Resources/jq
          chmod +x NameMyPdf.app/Contents/Resources/pdftotext-arm64
          chmod +x NameMyPdf.app/Contents/Resources/pdftotext-x86_64
          chmod +x NameMyPdf.app/Contents/Resources/jq-arm64
          chmod +x NameMyPdf.app/Contents/Resources/jq-x86_64          
          # Include shell script for cross-platform users
          cp normalize_filename.sh NameMyPdf.app/Contents/Resources/

          # Create a README for shell script users
          cat > NameMyPdf.app/Contents/Resources/README_ShellScript.txt << 'EOF'
          # NameMyPdf - Shell Script Usage

          This app includes universal binaries that work on both Apple Silicon and Intel Macs!

          If you need to run the shell script directly:

          ## Prerequisites:
          The app already includes both ARM64 and Intel versions of required tools.

          For standalone use on other systems:
          1. Install required tools:
             - macOS: `brew install poppler jq`
             - Ubuntu/Debian: `sudo apt-get install poppler-utils jq curl`
             - Other systems: Install poppler, jq, and curl

          ## Usage:
          ./normalize_filename.sh [--email your@email.com] file1.pdf file2.pdf

          ## What it does:
          - Extracts text from PDF files using pdftotext
          - Generates a descriptive filename based on DOI metadata from CrossRef
          - Renames the file automatically

          ## Notes:
          - The bundled tools automatically detect your Mac's architecture (ARM64/Intel)
          - Set CROSSREF_EMAIL environment variable for better API rate limits
          - Works on any Unix-like system (macOS, Linux, WSL)

          The shell script provides the same functionality as the compiled app.
          EOF

      - name: Verify App Creation
        run: |
          if [ -d "NameMyPdf.app" ]; then
            echo "App created successfully!"
            ls -la NameMyPdf.app/
            ls -la NameMyPdf.app/Contents/
          else
            echo "App creation failed!"
            exit 1
          fi

      - name: Create DMG
        run: |
          mkdir -p dist
          rm -f dist/NameMyPdf.dmg
          hdiutil create -size 50m -fs HFS+ -volname "NameMyPdf" temp.dmg
          hdiutil attach temp.dmg -mountpoint /Volumes/NameMyPdf
          cp -R NameMyPdf.app /Volumes/NameMyPdf/
          hdiutil detach /Volumes/NameMyPdf
          hdiutil convert temp.dmg -format UDZO -o dist/NameMyPdf.dmg
          rm temp.dmg

      - name: Commit and Push Built App
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add NameMyPdf.app/
          git add dist/NameMyPdf.dmg

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-build: Update NameMyPdf.app and DMG [skip ci]"
            git push
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-app
          path: |
            NameMyPdf.app
            dist/NameMyPdf.dmg

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/NameMyPdf.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
