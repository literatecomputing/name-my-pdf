name: Build Mac App with Platypus
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Platypus
        run: |
          # Install Platypus via Homebrew
          brew install --cask platypus
          # Wait for installation to complete
          sleep 3
          # Check if the command line tool is compressed
          if [ -f /Applications/Platypus.app/Contents/Resources/platypus_clt.gz ]; then
            sudo gunzip /Applications/Platypus.app/Contents/Resources/platypus_clt.gz
            sudo mkdir -p /usr/local/share/platypus
            sudo gunzip /Applications/Platypus.app/Contents/Resources/ScriptExec.gz
          fi
          # Install command line tool to /usr/local/bin
          sudo install /Applications/Platypus.app/Contents/Resources/platypus_clt /usr/local/bin/
          sudo install /Applications/Platypus.app/Contents/Resources/ScriptExec /usr/local/share/platypus/
          sudo rsync -ra /Applications/Platypus.app/Contents/Resources/*.nib /usr/local/share/platypus/
          # Create the required directory structure and copy ScriptExec
          sudo mkdir -p /usr/local/share/platypus
          sudo cp /Applications/Platypus.app/Contents/Resources/ScriptExec /usr/local/share/platypus/
          # Make sure ScriptExec is executable
          sudo chmod +x /usr/local/share/platypus/ScriptExec
          # Verify installation
          /usr/local/bin/platypus_clt -v
          # Debug: Check if ScriptExec exists
          ls -la /usr/local/share/platypus/

      - name: Debug Environment
        run: |
          echo "PATH: $PATH"
          echo "PWD: $PWD"
          echo "Contents of current directory:"
          ls -la
          echo "Contents of Platypus Resources:"
          ls -la /Applications/Platypus.app/Contents/Resources/
          echo "Python3 location:"
          which python3
          python3 --version

      - name: Install Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $HOME/.zprofile
          eval "$(/opt/homebrew/bin/brew shellenv)"

      - name: Install Poppler (for pdftotext)
        run: |
          eval "$(/opt/homebrew/bin/brew shellenv)"
          brew install poppler

      - name: Build App
        run: |
          # delete old version
          rm -rf NameMyPdf.app
          # Create the app using Platypus command line tool
          /usr/local/bin/platypus_clt \
            --name "NameMyPdf" \
            --author "Jay Pfaffman" \
            --app-version "0.1" \
            --bundle-identifier "com.literatecomputing.namemypdf" \
            --interface-type "Progress Bar" \
            --interpreter "/usr/bin/python3" \
            --app-icon "icon.icns" \
            --droppable \
            --file-prompt \
            --background \
            --quit-after-execution \
            "normalize_filename.py" \
            "NameMyPdf.app"
          mkdir -p NameMyPdf.app/Contents/Resources
          cp /opt/homebrew/bin/pdftotext NameMyPdf.app/Contents/Resources/

      - name: Verify App Creation
        run: |
          if [ -d "NameMyPdf.app" ]; then
            echo "App created successfully!"
            ls -la NameMyPdf.app/
            ls -la NameMyPdf.app/Contents/
          else
            echo "App creation failed!"
            exit 1
          fi

      - name: Create DMG
        run: |
          # Create a DMG for distribution
          mkdir -p dist
          rm -f dist/NameMyPdf.dmg
          hdiutil create -size 50m -fs HFS+ -volname "NameMyPdf" temp.dmg
          hdiutil attach temp.dmg -mountpoint /Volumes/NameMyPdf
          cp -R NameMyPdf.app /Volumes/NameMyPdf/
          hdiutil detach /Volumes/NameMyPdf
          hdiutil convert temp.dmg -format UDZO -o dist/NameMyPdf.dmg
          rm temp.dmg

      - name: Commit and Push Built App
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add the built files
          git add NameMyPdf.app/
          git add dist/NameMyPdf.dmg

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Commit the changes
            git commit -m "Auto-build: Update NameMyPdf.app and DMG [skip ci]"
            
            # Push the changes
            git push
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-app
          path: |
            NameMyPdf.app
            dist/NameMyPdf.dmg

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/NameMyPdf.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
