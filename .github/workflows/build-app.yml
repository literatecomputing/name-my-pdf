name: Build Mac App with Platypus

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # This enables manual triggering

jobs:
  build:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          arch -arm64 brew install --cask platypus

          sleep 2
          if [ -f /Applications/Platypus.app/Contents/Resources/platypus_clt.gz ]; then
            sudo gunzip /Applications/Platypus.app/Contents/Resources/platypus_clt.gz
            sudo gunzip /Applications/Platypus.app/Contents/Resources/ScriptExec.gz
          fi
          sudo mkdir -p /usr/local/share/platypus
          sudo install /Applications/Platypus.app/Contents/Resources/platypus_clt /usr/local/bin/
          sudo install /Applications/Platypus.app/Contents/Resources/ScriptExec /usr/local/share/platypus/
          sudo rsync -ra /Applications/Platypus.app/Contents/Resources/*.nib /usr/local/share/platypus/
          sudo chmod +x /usr/local/share/platypus/ScriptExec

      - name: Make Shell Script Executable
        run: |
          chmod +x normalize_filename.sh

      - name: Build App with Platypus
        run: |
          rm -rf NameMyPdf.app
          /usr/local/bin/platypus_clt \
            --name "NameMyPdf" \
            --author "Jay Pfaffman" \
            --app-version "0.1" \
            --bundle-identifier "com.literatecomputing.namemypdf" \
            --interface-type "Progress Bar" \
            --interpreter "/bin/bash" \
            --app-icon "icon.icns" \
            --droppable \
            --file-prompt \
            --background \
            --quit-after-execution \
            "normalize_filename.sh" \
            "NameMyPdf.app"

          mkdir -p NameMyPdf.app/Contents/Resources

          # Include shell script for cross-platform users
          cp normalize_filename.sh NameMyPdf.app/Contents/Resources/

          # Create a simple README with installation instructions
          cat > NameMyPdf.app/Contents/Resources/README.txt << 'EOF'
          # NameMyPdf - PDF DOI Renamer

          ## Prerequisites:
          This app requires poppler and jq to be installed:

          ```
          brew install poppler jq
          ```

          ## Usage:
          - Drag PDF files onto the app
          - Or run the shell script directly: ./normalize_filename.sh file.pdf

          ## What it does:
          - Extracts DOI from PDF files
          - Fetches metadata from CrossRef API
          - Renames files based on author, year, and title

          ## Notes:
          - Set CROSSREF_EMAIL environment variable for better API rate limits
          - Works on any system with bash, poppler, jq, and curl

          Simple, lightweight, and reliable!
          EOF

      - name: Verify App Creation
        run: |
          if [ -d "NameMyPdf.app" ]; then
            echo "App created successfully!"
            ls -la NameMyPdf.app/
            ls -la NameMyPdf.app/Contents/
          else
            echo "App creation failed!"
            exit 1
          fi

      - name: Import Code-Signing Certificates
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Create keychain
          security create-keychain -p "temp_password" signing_temp.keychain
          security default-keychain -s signing_temp.keychain
          security unlock-keychain -p "temp_password" signing_temp.keychain

          # Import certificates
          echo "${{ secrets.DEVELOPER_ID_APPLICATION_P12 }}" | base64 --decode > app_cert.p12
          echo "${{ secrets.DEVELOPER_ID_INSTALLER_P12 }}" | base64 --decode > installer_cert.p12

          security import app_cert.p12 -k signing_temp.keychain -P "${{ secrets.DEVELOPER_ID_APPLICATION_PASSWORD }}" -T /usr/bin/codesign
          security import installer_cert.p12 -k signing_temp.keychain -P "${{ secrets.DEVELOPER_ID_INSTALLER_PASSWORD }}" -T /usr/bin/codesign

          # Set partition list
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp_password" signing_temp.keychain

          # Clean up certificate files
          rm app_cert.p12 installer_cert.p12

      - name: Sign App Bundle
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Sign the app bundle
          codesign --force --options runtime --deep --sign "Developer ID Application: Jay Pfaffman (B9YN7Q93P9)" NameMyPdf.app

          # Verify signing
          codesign --verify --verbose NameMyPdf.app
          spctl --assess --verbose NameMyPdf.app

      - name: Create and Sign DMG
        run: |
          mkdir -p dist
          rm -f dist/NameMyPdf.dmg
          hdiutil create -size 10m -fs HFS+ -volname "NameMyPdf" temp.dmg
          hdiutil attach temp.dmg -mountpoint /Volumes/NameMyPdf
          cp -R NameMyPdf.app /Volumes/NameMyPdf/
          hdiutil detach /Volumes/NameMyPdf
          hdiutil convert temp.dmg -format UDZO -o dist/NameMyPdf.dmg
          rm temp.dmg

      - name: Sign DMG
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Sign the DMG
          codesign --force --sign "Developer ID Application: Jay Pfaffman (B9YN7Q93P9)" dist/NameMyPdf.dmg
          # Verify DMG signing
          codesign --verify --verbose dist/NameMyPdf.dmg
          spctl --assess --type open --context context:primary-signature --verbose dist/NameMyPdf.dmg

      - name: Commit and Push Built App
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git add NameMyPdf.app/
          git add dist/NameMyPdf.dmg

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-build: Update NameMyPdf.app and DMG [skip ci]"
            git push
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mac-app
          path: |
            NameMyPdf.app
            dist/NameMyPdf.dmg

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/NameMyPdf.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
