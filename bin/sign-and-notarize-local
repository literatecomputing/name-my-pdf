#!/usr/bin/env bash
set -e

# Local Apple code signing and notarization script for NameMyPdf
# This version uses your existing keychain (no temporary keychain creation)

# Configuration
DEVELOPER_ID_APPLICATION="Developer ID Application: Jay Pfaffman (B9YN7Q93P9)"
APPLE_ID="jay@literatecomputing.com"
TEAM_ID="B9YN7Q93P9"
BUNDLE_ID="com.literatecomputing.namemypdf"
KEYCHAIN_PROFILE="notarization-password"  # You'll create this with notarytool

# App and DMG paths
APP_PATH="dist/NameMyPdf.app"
DMG_PATH="dist/NameMyPdf.dmg"

echo "üîê Starting Apple code signing and notarization process..."

# Step 1: Check if app exists
if [ ! -d "$APP_PATH" ]; then
    echo "‚ùå Error: App not found at $APP_PATH"
    echo "Run the build process first: ./bin/make-app-unsigned"
    exit 1
fi

# Step 2: Verify we have the certificate
echo "üîç Checking for code signing certificate..."
if ! security find-identity -v -p codesigning | grep -q "Developer ID Application: Jay Pfaffman"; then
    echo "‚ùå Error: Developer ID Application certificate not found"
    echo "Please install your Developer ID Application certificate in Keychain Access"
    exit 1
fi

echo "‚úÖ Found Developer ID Application certificate"

# Step 3: Sign the app bundle with hardened runtime
echo "üìù Signing app bundle..."
codesign \
    --force \
    --options runtime \
    --timestamp \
    --sign "$DEVELOPER_ID_APPLICATION" \
    --verbose \
    "$APP_PATH"

# Step 4: Verify app signature
echo "‚úÖ Verifying app signature..."
codesign --verify --deep --strict --verbose=2 "$APP_PATH"
spctl --assess --type exec --verbose=4 "$APP_PATH"

# Step 5: Create DMG if it doesn't exist or remove existing one
if [ -f "$DMG_PATH" ]; then
    echo "üóëÔ∏è  Removing existing DMG..."
    rm -f "$DMG_PATH"
fi

echo "üì¶ Creating DMG..."
create-dmg \
    --volname "NameMyPdf" \
    --volicon "icons/icon.icns" \
    --window-pos 200 120 \
    --window-size 800 450 \
    --icon-size 100 \
    --icon "NameMyPdf.app" 200 190 \
    --hide-extension "NameMyPdf.app" \
    --app-drop-link 600 190 \
    --hdiutil-quiet \
    --overwrite \
    "$DMG_PATH" \
    "dist/"

# Step 6: Sign the DMG
echo "üìù Signing DMG..."
codesign \
    --force \
    --timestamp \
    --sign "$DEVELOPER_ID_APPLICATION" \
    --verbose \
    "$DMG_PATH"

# Step 7: Verify DMG signature
echo "‚úÖ Verifying DMG signature..."
codesign --verify --deep --strict --verbose=2 "$DMG_PATH"

# Step 8: Check if notarization credentials are set up
echo "üîç Checking notarization credentials..."
if ! xcrun notarytool history --keychain-profile "$KEYCHAIN_PROFILE" >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Keychain profile '$KEYCHAIN_PROFILE' not found."
    echo ""
    echo "Setting up notarization credentials..."
    echo "You'll be prompted for your Apple ID app-specific password."
    echo ""
    echo "Need to create an app-specific password?"
    echo "Go to: https://appleid.apple.com/account/manage"
    echo "Navigate to: Sign-In and Security ‚Üí App-Specific Passwords"
    echo ""
    
    xcrun notarytool store-credentials "$KEYCHAIN_PROFILE" \
        --apple-id "$APPLE_ID" \
        --team-id "$TEAM_ID"
    
    echo "‚úÖ Notarization credentials stored!"
fi

# Step 9: Submit for notarization
echo "üöÄ Submitting DMG for notarization..."
echo "This may take several minutes..."

# Submit and wait for notarization
echo "Submitting to Apple's notarization service..."
SUBMISSION_OUTPUT=$(xcrun notarytool submit "$DMG_PATH" \
    --keychain-profile "$KEYCHAIN_PROFILE" \
    --wait \
    --output-format json)

echo "$SUBMISSION_OUTPUT"

# Check if submission was successful
if echo "$SUBMISSION_OUTPUT" | grep -q '"status": "Accepted"'; then
    SUBMISSION_ID=$(echo "$SUBMISSION_OUTPUT" | grep '"id"' | head -1 | sed 's/.*"id": *"\([^"]*\)".*/\1/')
    echo "‚úÖ Notarization successful! Submission ID: $SUBMISSION_ID"
else
    echo "‚ùå Notarization failed!"
    echo "Response: $SUBMISSION_OUTPUT"
    exit 1
fi

# Step 10: Staple the notarization to both app and DMG
echo "üìé Stapling notarization ticket to app..."
xcrun stapler staple "$APP_PATH"

echo "üìé Stapling notarization ticket to DMG..."
xcrun stapler staple "$DMG_PATH"

# Step 11: Final verification
echo "üîç Final verification..."
echo "Verifying app..."
xcrun stapler validate "$APP_PATH"
spctl --assess --type exec --verbose=4 "$APP_PATH"

echo "Verifying DMG..."
xcrun stapler validate "$DMG_PATH"
spctl --assess --type open --context context:primary-signature --verbose=4 "$DMG_PATH"

echo ""
echo "üéâ SUCCESS! Your app and DMG are now signed and notarized by Apple!"
echo ""
echo "Files created:"
echo "  App: $APP_PATH"
echo "  DMG: $DMG_PATH"
echo ""
echo "The DMG can now be distributed and will run on any Mac without security warnings."
echo ""
echo "File sizes:"
ls -lh "$APP_PATH" "$DMG_PATH"
