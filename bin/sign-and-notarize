#!/usr/bin/env bash
set -e

# Modern Apple code signing and notarization script for NameMyPdf
# Requires: 
# - Developer ID Application certificate in Keychain
# - Developer ID Installer certificate in Keychain  
# - App-specific password stored in Keychain (for notarization)
# - Xcode command line tools

# Configuration
DEVELOPER_ID_APPLICATION="Developer ID Application: Jay Pfaffman (B9YN7Q93P9)"
DEVELOPER_ID_INSTALLER="Developer ID Installer: Jay Pfaffman (B9YN7Q93P9)"  # If you have one
APPLE_ID="jay@literatecomputing.com"
TEAM_ID="B9YN7Q93P9"
BUNDLE_ID="com.literatecomputing.namemypdf"
KEYCHAIN_PROFILE="notarization-password"  # You'll create this

# App and DMG paths
APP_PATH="dist/NameMyPdf.app"
DMG_PATH="dist/NameMyPdf.dmg"

echo "üîê Starting Apple code signing and notarization process..."

# Step 1: Check if app exists
if [ ! -d "$APP_PATH" ]; then
    echo "‚ùå Error: App not found at $APP_PATH"
    echo "Run the build process first (bin/make-app without the signing parts)"
    exit 1
fi

# Step 2: Sign the app bundle with hardened runtime
echo "üìù Signing app bundle..."
codesign \
    --force \
    --options runtime \
    --timestamp \
    --sign "$DEVELOPER_ID_APPLICATION" \
    --verbose \
    "$APP_PATH"

# Step 3: Verify app signature
echo "‚úÖ Verifying app signature..."
codesign --verify --deep --strict --verbose=2 "$APP_PATH"
spctl --assess --type exec --verbose=4 "$APP_PATH"

# Step 4: Create DMG if it doesn't exist
if [ ! -f "$DMG_PATH" ]; then
    echo "üì¶ Creating DMG..."
    # Remove any existing temp DMG files
    rm -f "dist/NameMyPdf"*.dmg
    
    # Create DMG using create-dmg
    create-dmg \
        --volname "NameMyPdf" \
        --volicon "icon.icns" \
        --window-pos 200 120 \
        --window-size 800 450 \
        --icon-size 100 \
        --icon "NameMyPdf.app" 200 190 \
        --hide-extension "NameMyPdf.app" \
        --app-drop-link 600 190 \
        --hdiutil-quiet \
        --overwrite \
        "$DMG_PATH" \
        "dist/"
fi

# Step 5: Sign the DMG
echo "üìù Signing DMG..."
codesign \
    --force \
    --timestamp \
    --sign "$DEVELOPER_ID_APPLICATION" \
    --verbose \
    "$DMG_PATH"

# Step 6: Verify DMG signature
echo "‚úÖ Verifying DMG signature..."
codesign --verify --deep --strict --verbose=2 "$DMG_PATH"

# Step 7: Submit for notarization using notarytool
echo "üöÄ Submitting for notarization..."
echo "This may take several minutes..."

# Check if keychain profile exists
if ! xcrun notarytool history --keychain-profile "$KEYCHAIN_PROFILE" >/dev/null 2>&1; then
    echo "‚ùå Keychain profile '$KEYCHAIN_PROFILE' not found."
    echo ""
    echo "Please create it first with:"
    echo "xcrun notarytool store-credentials '$KEYCHAIN_PROFILE' --apple-id '$APPLE_ID' --team-id '$TEAM_ID'"
    echo ""
    echo "You'll be prompted for an app-specific password."
    echo "Create one at: https://appleid.apple.com/account/manage -> Sign-In and Security -> App-Specific Passwords"
    exit 1
fi

# Submit for notarization
SUBMISSION_ID=$(xcrun notarytool submit "$DMG_PATH" \
    --keychain-profile "$KEYCHAIN_PROFILE" \
    --wait \
    --output-format json | jq -r '.id')

if [ "$SUBMISSION_ID" = "null" ] || [ -z "$SUBMISSION_ID" ]; then
    echo "‚ùå Notarization submission failed"
    xcrun notarytool submit "$DMG_PATH" \
        --keychain-profile "$KEYCHAIN_PROFILE" \
        --wait
    exit 1
fi

echo "‚úÖ Notarization successful! Submission ID: $SUBMISSION_ID"

# Step 8: Staple the notarization to both app and DMG
echo "üìé Stapling notarization ticket to app..."
xcrun stapler staple "$APP_PATH"

echo "üìé Stapling notarization ticket to DMG..."
xcrun stapler staple "$DMG_PATH"

# Step 9: Final verification
echo "üîç Final verification..."
echo "Verifying app..."
xcrun stapler validate "$APP_PATH"
spctl --assess --type exec --verbose=4 "$APP_PATH"

echo "Verifying DMG..."
xcrun stapler validate "$DMG_PATH"
spctl --assess --type open --context context:primary-signature --verbose=4 "$DMG_PATH"

echo ""
echo "üéâ SUCCESS! Your app and DMG are now signed and notarized by Apple!"
echo ""
echo "App: $APP_PATH"
echo "DMG: $DMG_PATH"
echo ""
echo "The DMG can now be distributed and will run on any Mac without security warnings."